#!/usr/bin/env python
import os, sys
import yaml
import argparse

try:
    # For Python 3.0 and later
    import urllib.request as urllib
    from urllib.error import HTTPError
except ImportError as e:
    # Fall back to Python 2's urllib2
    import urllib2 as urllib
    from urllib2 import HTTPError

class Expando(object):
  pass

package_directory = os.path.dirname(os.path.realpath(os.path.abspath(__file__)))

os.chdir(package_directory);

parser = argparse.ArgumentParser(description='Play some sounds')
parser.add_argument('key', nargs='*', metavar='key', help='sound to play')
parser.add_argument('--list', help='lists sounds', action="store_true")
parser.add_argument('--download', help='download sounds', action="store_true")
parser.add_argument('--clean', help='download sounds', action="store_true")
parser.add_argument('--update', help='update', action="store_true")
parser.add_argument('--version', help='show version', action="store_true")
parser.add_argument('--random', help='play random sound', action="store_true")
parser.add_argument('--name', help='play name')


args = parser.parse_args()

sounds = {}
aliases = {}

def display(key, sound):
  print(sound['title'])
  print(sound['url'])
  if 'artUrl' in sound:
    os.system('head -$(tput lines) %s' % sound['artUrl'])

def play(key, sound=None):
  if sound is None:
    sound = sounds[key]

  display(key, sound)
  os.system('./play-sound.sh ' + grabfile(key, sound) + '&> /dev/null')

def grabfile(key, sound):
    path = '/tmp/soundboard/%s' % (key)
    soundpath = path + '/sound.file'

    if os.path.exists(soundpath):
      return soundpath

    try:
      os.makedirs(path)
    except OSError as exc:  # Python >2.5
      print(exc)

    url = sound['url']

    try:
      req = urllib.Request(url, headers={'User-Agent' : "Magic Browser"})
      con = urllib.urlopen( req )
      fw = open(soundpath, 'wb')
      fw.write(con.read())
      fw.close()
    except HTTPError as e:
      print('something went wrong :(', e)
      return sound['url']

    return soundpath

def which(program):
  def executable(fpath):
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

  fpath, fname = os.path.split(program)
  if fpath:
    if executable(program):
      return program
  else:
    for path in os.environ["PATH"].split(os.pathsep):
      path = path.strip('"')
      fpath = os.path.join(path, program)
      if executable(fpath):
        return fpath
  return None


def say(message):
  if which('say'):
    os.system('say ' + message)
  else:
    os.system('espeak "{}"'.format(message))


with open("./sounds.yaml", 'r') as stream:
  sounds = yaml.load(stream)

with open("./aliases.yaml", 'r') as stream:
  aliases = yaml.load(stream)

if(args.download):
  for s in sounds.keys():
    grabfile(s, sounds[s])


if(args.list):
  for a in aliases.keys():
    print("%s" % (a))
  for s in sounds.keys():
    print("%s" % (s))


if args.key:
  for ak in args.key:
    key = None

    if ak in aliases:
      key = aliases[ak]
    else:
      key = ak


    if not key in sounds:
      print("sound %s not found" % (key))
      sys.exit(1)

    s = sounds[key]
    play(key, s)

if args.clean:
  import shutil
  shutil.rmtree('/tmp/soundboard')

if args.version:
  os.system('git describe --tags')

if args.update:
  os.system('git pull')

if args.random:
  import random
  key = random.choice(sounds.keys())
  play(key, sounds[key])

if args.name:
  play('chop/john_cena/start')
  say(args.name)
  play('chop/john_cena/end')
